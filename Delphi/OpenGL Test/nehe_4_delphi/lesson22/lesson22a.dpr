program lesson22a;

{   kÛd pro Delphi 7}

uses
  Windows,
  Messages,
  OpenGL,sysutils,
  GLaux;

procedure glGenTextures(n: GLsizei; var textures: GLuint); stdcall; external opengl32;
procedure glBindTexture(target: GLenum; texture: GLuint); stdcall; external opengl32;

type    // Definice rozöÌ¯en˝ch moûnostÌ OpenGL
  PFNGLMULTITEXCOORD1FARBPROC = procedure(target: GLenum; s,t : GLfloat); stdcall;
  PFNGLMULTITEXCOORD2FARBPROC = procedure(target: GLenum; s,t : GLfloat); stdcall;
  PFNGLMULTITEXCOORD3FARBPROC = procedure(target: GLenum; s,t : GLfloat); stdcall;
  PFNGLMULTITEXCOORD4FARBPROC = procedure(target: GLenum; s,t : GLfloat); stdcall;
  PFNGLACTIVETEXTUREARBPROC = procedure(target: GLenum); stdcall;
  PFNGLCLIENTACTIVETEXTUREARBPROC = procedure(target: GLenum); stdcall;

const
  MAX_EMBOSS = 0.008;               // Maxim·lnÌ posunutÌ efektem
  __ARB_ENABLE = true;              // Pouûito pro vy¯azenÌ multitexturingu
  MAX_EXTENSION_SPACE = 10240;      // MÌsto pro ¯etÏzce s OpenGL rozöÌ¯enÌmi
  MAX_EXTENSION_LENGTH = 256;       // Maximum znak˘ v jednom ¯etÏzci s rozöÌ¯enÌm
  EXT_INFO = false;                 // true, pokud chcete p¯i startu vidÏt podporovan· rozöÌ¯enÌ OpenGL
  GL_MAX_TEXTURE_UNITS_ARB = $84E2; // Konstanty rozöÌ¯enÌ, kterÈ budeme pot¯ebovat
  GL_RGB8 = $8051;
  GL_RGBA8 = $8058;
  GL_TEXTURE0_ARB = $84C0;
  GL_COMBINE_EXT = $8570;
  GL_COMBINE_RGB_EXT = $8571;
  GL_TEXTURE1_ARB = $84C1;

var
  h_Rc: HGLRC;		                  // Trval˝ Rendering Context
  h_Dc: HDC;                        // Priv·tnÌ GDI Device Context
  h_Wnd: HWND;                      // Obsahuje Handle naöeho okna
  keys: array [0..255] of BOOL;	    // Pole pro ukl·d·nÌ vstupu z kl·vesnice
  Active: bool = true;              // Ponese informaci o tom, zda je okno aktivnÌ
  FullScreen:bool = true;           // Ponese informaci o tom, zda je program ve fullscreenu
  xrot: GLFloat;                    // X rotace
  yrot: GLFloat;                    // Y rotace
  xspeed: GLfloat;                  // Rychlost x rotace
  yspeed: GLfloat;                  // Rychlost y rotace
  z: GLfloat = -5.0;                // Hloubka v obrazovce
  filter: GLuint = 1;               // Jak˝ filtr pouûÌt
  texture: array [0..2] of GLuint;  // MÌsto pro t¯i textury
  bump: array [0..2] of GLuint;     // Naöe bumpmapy
  invbump: array [0..2] of GLuint;  // InvertovanÈ bumpmapy
  glLogo: GLuint;                   // MÌsto pro OpenGL Logo
  multiLogo: GLuint;                // MÌsto pro logo s multitexturingem
  LightAmbient: array [0..2] of GLfloat = ( 0.2, 0.2, 0.2);           // Barva ambientnÌho svÏtla je 20% bÌl·
  LightDiffuse: array [0..2] of GLfloat = ( 1.0, 1.0, 1.0);           // Dif˙znÌ svÏtlo je bÌlÈ
  LightPosition: array [0..2] of GLfloat = ( 0.0, 0.0, 2.0);          // Pozice je nÏkde uprost¯ed scÈny
  Gray: array [0..3] of GLfloat = ( 0.5, 0.5, 0.5, 1.0 );             // Barva okraje textury
  emboss: bool = false;                                               // Jenom Emboss, û·dn· z·kladnÌ textura
  bumps: bool = true;                                                 // PouûÌvat bumpmapping?
  Multitexturesupported: bool = false;                                // Indik·tor podpory multitexturingu
  UseMultitexture: bool = true;                                       // Pouûit multitexturing?
  maxTexelUnits: GLint = 1;                                           // PoËet texturovacÌch jednotek - nejmÈnÏ 1
  glMultiTexCoord1fARB: PFNGLMULTITEXCOORD1FARBPROC = nil;
  glMultiTexCoord2fARB: PFNGLMULTITEXCOORD2FARBPROC = nil;
  glMultiTexCoord3fARB: PFNGLMULTITEXCOORD3FARBPROC = nil;
  glMultiTexCoord4fARB: PFNGLMULTITEXCOORD4FARBPROC = nil;
  glActiveTextureARB: PFNGLACTIVETEXTUREARBPROC = nil;
  glClientActiveTextureARB: PFNGLCLIENTACTIVETEXTUREARBPROC = nil;
  data : Array [0..119] of GLfloat = (
		// P¯ednÌ stÏna
		0.0, 0.0,		-1.0, -1.0, +1.0,
		1.0, 0.0,		+1.0, -1.0, +1.0,
		1.0, 1.0,		+1.0, +1.0, +1.0,
		0.0, 1.0,		-1.0, +1.0, +1.0,
		// ZadnÌ stÏna
		1.0, 0.0,		-1.0, -1.0, -1.0,
		1.0, 1.0,		-1.0, +1.0, -1.0,
		0.0, 1.0,		+1.0, +1.0, -1.0,
		0.0, 0.0,		+1.0, -1.0, -1.0,
		// HornÌ stÏna
		0.0, 1.0,		-1.0, +1.0, -1.0,
		0.0, 0.0,		-1.0, +1.0, +1.0,
		1.0, 0.0,		+1.0, +1.0, +1.0,
		1.0, 1.0,		+1.0, +1.0, -1.0,
		// DolnÌ stÏna
		1.0, 1.0,		-1.0, -1.0, -1.0,
		0.0, 1.0,		+1.0, -1.0, -1.0,
		0.0, 0.0,		+1.0, -1.0, +1.0,
		1.0, 0.0,		-1.0, -1.0, +1.0,
		// Prav· stÏna
		1.0, 0.0,		+1.0, -1.0, -1.0,
		1.0, 1.0,		+1.0, +1.0, -1.0,
		0.0, 1.0,		+1.0, +1.0, +1.0,
		0.0, 0.0,		+1.0, -1.0, +1.0,
		// Lev· stÏna
		0.0, 0.0,		-1.0, -1.0, -1.0,
		1.0, 0.0,		-1.0, -1.0,  1.0,
		1.0, 1.0,		-1.0,  1.0,  1.0,
		0.0, 1.0,		-1.0,  1.0, -1.0);

function isInString(strings: pchar; searchstring: pchar): boolean;
begin
  if Pos(searchstring,strings) <> 0 then Result := true       // Hled·nÌ celÈho ¯etÏzce jmÈna rozöÌ¯enÌ
    else Result := false;                                     // Sm˘la, nic jsme nenaöli!
end;

function initMultitexture: boolean;
var extensions: pchar;
begin
  extensions := glGetString(GL_EXTENSIONS);                                     // ZÌsk·nÌ ¯etÏzce s rozöÌ¯enÌmi
  if EXT_INFO then MessageBox(h_Wnd,extensions,'OpenGL extensions',MB_OK or MB_ICONINFORMATION);
  if (isInString(extensions,'GL_ARB_multitexture')) and __ARB_ENABLE            // Je multitexturing podporov·n? a P¯Ìznak pro povolenÌ multitexturingu
      and isInString(extensions,'GL_EXT_texture_env_combine') then              // Je podporov·no texture-environment-combining?
    begin
    glGetIntegerv(GL_MAX_TEXTURE_UNITS_ARB,@maxTexelUnits);
    glMultiTexCoord1fARB := wglGetProcAddress('glMultiTexCoord1fARB');
    glMultiTexCoord2fARB := wglGetProcAddress('glMultiTexCoord2fARB');
    glMultiTexCoord3fARB := wglGetProcAddress('glMultiTexCoord3fARB');
    glMultiTexCoord4fARB := wglGetProcAddress('glMultiTexCoord4fARB');
    glActiveTextureARB := wglGetProcAddress('glActiveTextureARB');
    glClientActiveTextureARB := wglGetProcAddress('glClientActiveTextureARB');
    if EXT_INFO then MessageBox(h_Wnd,'The GL_ARB_multitexture extension will be used.','Feature supported!',MB_OK or MB_ICONINFORMATION);
    Result := true;
    exit;
    end;
  UseMultitexture := false;                                                     // Nem˘ûeme to pouûÌvat, pokud to nenÌ podporov·no!
  Result := false;
end;

procedure initLights;
begin
  glLightfv(GL_LIGHT1,GL_AMBIENT,@LightAmbient);          // NaËtenÌ informace o svÏtlech do GL_LIGHT1
  glLightfv(GL_LIGHT1,GL_DIFFUSE,@LightDiffuse);
  glLightfv(GL_LIGHT1,GL_POSITION,@LightPosition);
  glEnable(GL_LIGHT1);
end;

function LoadBMP(FileName: pchar):PTAUX_RGBImageRec;        // Nahraje bitmapu
begin
  if Filename = '' then                                     // Byla p¯ed·na cesta k souboru?
    begin
    Result := nil;                                          // Pokud ne, konec
    exit;
    end;
  if not FileExists(Filename) then                          // Existuje soubor?
    begin
    Result := nil;                                          // Pokud ne, konec
    exit;
    end;
  Result := auxDIBImageLoadA(FileName);                     // NaËte bitmapu a vr·tÌ na ni ukazatel
end;

function LoadGLTextures: Bool;                              // Loading bitmapy a konverze na texturu
type Tznak = array [0..255] of byte;                        // Typ pole znak˘
var TextureImage: array [0..0] of PTAUX_RGBImageRec;        // Ukl·d· bitmapu
    Status: Bool;                                           // Indikuje chyby
    i: integer;                                             // Cyklus
    bumpmap, alpha, alpha1: ^Tznak;                         // PomocnÈ promÏnnÈ pro v˝poËet bumpmapy a log
begin
  Status := false;
  ZeroMemory(@TextureImage,sizeof(TextureImage));           // Vynuluje pamÏù
  TextureImage[0] := LoadBMP('Data/Base.bmp');              // Nahraje bitmapu
  if Assigned(TextureImage[0]) then                         // Vöe je bez problÈm˘?
    begin
    Status := true;                                         // Vöe je bez problÈm˘
    glGenTextures(3,Texture[0]);                            // Generuje t¯i textury
    // Vytvo¯enÌ neline·rnÏ filtrovanÈ textury
    glBindTexture(GL_TEXTURE_2D,texture[0]);
    glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MAG_FILTER,GL_NEAREST);
    glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MIN_FILTER,GL_NEAREST);
    glTexImage2D(GL_TEXTURE_2D,0,GL_RGB8,TextureImage[0].sizeX,TextureImage[0].sizeY,0,GL_RGB,GL_UNSIGNED_BYTE,TextureImage[0].data);
    // Vytvo¯enÌ line·rnÏ filtrovanÈ textury
    glBindTexture(GL_TEXTURE_2D,texture[1]);
    glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MAG_FILTER,GL_LINEAR);
    glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MIN_FILTER,GL_LINEAR);
    glTexImage2D(GL_TEXTURE_2D,0,GL_RGB8,TextureImage[0].sizeX,TextureImage[0].sizeY,0,GL_RGB,GL_UNSIGNED_BYTE,TextureImage[0].data);
    // Vytvo¯enÌ mipmapovanÈ textury
    glBindTexture(GL_TEXTURE_2D,texture[2]);
    glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MAG_FILTER,GL_LINEAR);
    glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MIN_FILTER,GL_LINEAR_MIPMAP_NEAREST);
    gluBuild2DMipmaps(GL_TEXTURE_2D,GL_RGB8,TextureImage[0].sizeX,TextureImage[0].sizeY,GL_RGB,GL_UNSIGNED_BYTE,TextureImage[0].data);
    end
    else Status := false;
  TextureImage[0] := LoadBMP('Data/Bump.bmp');              // Loading bumpmap
  if Assigned(TextureImage[0]) then
    begin
    glPixelTransferf(GL_RED_SCALE,0.5);                     // SnÌûenÌ intenzity RGB na 50% - poloviËnÌ intenzita
    glPixelTransferf(GL_GREEN_SCALE,0.5);
    glPixelTransferf(GL_BLUE_SCALE,0.5);
    glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_WRAP_S,GL_CLAMP);        // Bez wrappingu (zalamov·nÌ)
    glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_WRAP_T,GL_CLAMP);
    glTexParameterfv(GL_TEXTURE_2D,GL_TEXTURE_BORDER_COLOR,@gray);    // Barva okraje textury
    glGenTextures(3,bump[0]);                                         // Vytvo¯Ì t¯i textury
    // Vytvo¯enÌ neline·rnÏ filtrovanÈ textury
    glBindTexture(GL_TEXTURE_2D,bump[0]);
    glTexImage2D(GL_TEXTURE_2D,0,GL_RGB8,TextureImage[0].sizeX,TextureImage[0].sizeY,0,GL_RGB,GL_UNSIGNED_BYTE,TextureImage[0].data);
    glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MAG_FILTER,GL_NEAREST);
    glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MIN_FILTER,GL_NEAREST);
    // Vytvo¯enÌ line·rnÏ filtrovanÈ textury
    glBindTexture(GL_TEXTURE_2D,bump[1]);
    glTexImage2D(GL_TEXTURE_2D,0,GL_RGB8,TextureImage[0].sizeX,TextureImage[0].sizeY,0,GL_RGB,GL_UNSIGNED_BYTE,TextureImage[0].data);
    glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MAG_FILTER,GL_LINEAR);
    glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MIN_FILTER,GL_LINEAR);
    // Vytvo¯enÌ mipmapovanÈ textury
    glBindTexture(GL_TEXTURE_2D,bump[2]);
    gluBuild2DMipmaps(GL_TEXTURE_2D,GL_RGB8,TextureImage[0].sizeX,TextureImage[0].sizeY,GL_RGB,GL_UNSIGNED_BYTE,TextureImage[0].data);
    glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MAG_FILTER,GL_LINEAR);
    glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MIN_FILTER,GL_LINEAR_MIPMAP_NEAREST);
    //**************************************************************************
    // Invertov·nÌ bumpmapy
    // V Delphi to bohuûel nejde tak jednoduöe jako v C++. P¯ekladaË ohl·sÌ chybu.
    // Dle n·povÏdy je toto spr·vn˝ opis konstrukce z C++. Douf·m :-)))
    // U vytv·¯enÌ textur nezapomeÚte p¯edat pomocnou promÏnnou (bumpmap) mÌsto
    // dat z TextureImage[0].data!!!!!!!
    //**************************************************************************
    GetMem(bumpmap,3*TextureImage[0].sizeX*TextureImage[0].sizeY);              // Alokace pamÏti pro pomocnou promÏnnou
    bumpmap := TextureImage[0].data;                                            // P¯ed·nÌ dat do pomocnÈ promÏnnÈ
    for i:= 0 to 3*TextureImage[0].sizeX*TextureImage[0].sizeY-1 do             // VlastnÌ invertov·nÌ
      begin
      bumpmap[i] := 255 - bumpmap[i];
      end;
    glGenTextures(3,invbump[0]);                                                // Vytvo¯Ì t¯i textury
    // Vytvo¯enÌ neline·rnÏ filtrovanÈ textury
    glBindTexture(GL_TEXTURE_2D,invbump[0]);
    glTexImage2D(GL_TEXTURE_2D,0,GL_RGB8,TextureImage[0].sizeX,TextureImage[0].sizeY,0,GL_RGB,GL_UNSIGNED_BYTE,bumpmap);
    glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MAG_FILTER,GL_NEAREST);
    glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MIN_FILTER,GL_NEAREST);
    // Vytvo¯enÌ line·rnÏ filtrovanÈ textury
    glBindTexture(GL_TEXTURE_2D,invbump[1]);
    glTexImage2D(GL_TEXTURE_2D,0,GL_RGB8,TextureImage[0].sizeX,TextureImage[0].sizeY,0,GL_RGB,GL_UNSIGNED_BYTE,bumpmap);
    glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MAG_FILTER,GL_LINEAR);
    glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MIN_FILTER,GL_LINEAR);
    // Vytvo¯enÌ mipmapovanÈ textury
    glBindTexture(GL_TEXTURE_2D,invbump[2]);
    gluBuild2DMipmaps(GL_TEXTURE_2D,GL_RGB8,TextureImage[0].sizeX,TextureImage[0].sizeY,GL_RGB,GL_UNSIGNED_BYTE,bumpmap);
    glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MAG_FILTER,GL_LINEAR);
    glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MIN_FILTER,GL_LINEAR_MIPMAP_NEAREST);
    glPixelTransferf(GL_RED_SCALE,1.0);                     // Vr·cenÌ intenzity RGB zpÏt na 100%
    glPixelTransferf(GL_GREEN_SCALE,1.0);
    glPixelTransferf(GL_BLUE_SCALE,1.0);
    bumpmap := nil;
    FreeMem(bumpmap);                                       // UvolnÏnÌ pamÏti po pomocnÈ promÏnnÈ
    end
    else Status := false;
  TextureImage[0] := LoadBMP('Data/OpenGL_ALPHA.bmp');      // NaËte bitmapy log
  if Assigned(TextureImage[0]) then
    begin
    GetMem(alpha,4*TextureImage[0].sizeX*TextureImage[0].sizeY);                // Alokuje pamÏù pro RGBA8-Texturu
    //**************************************************************************
    // Alfa kan·l loga OpenGL
    // V Delphi to bohuûel nejde tak jednoduöe jako v C++. P¯ekladaË ohl·sÌ chybu.
    // Dle n·povÏdy je toto spr·vn˝ opis konstrukce z C++. Douf·m :-)))
    //**************************************************************************
    GetMem(alpha1,sizeof(TextureImage[0].data));                                // Alokace pamÏti pro pomocnou promÏnnou
    alpha1 := TextureImage[0].data;                                             // P¯ed·nÌ dat do pomocnÈ promÏnnÈ
    for i:=0 to TextureImage[0].sizeX*TextureImage[0].sizeY-1 do
      alpha[4*i+3] := alpha1[i*3];                                              // Vezme pouze Ëervenou barvu jako alpha kan·l
    alpha1 := nil;
    FreeMem(alpha1);                                                            // UvolnÏnÌ pamÏti po pomocnÈ promÏnnÈ
    TextureImage[0] := LoadBMP('Data/OpenGL.bmp');
    if not Assigned(TextureImage[0]) then Status := false;
    GetMem(alpha1,sizeof(TextureImage[0].data));                                // Alokace pamÏti pro pomocnou promÏnnou
    alpha1 := TextureImage[0].data;                                             // P¯ed·nÌ dat do pomocnÈ promÏnnÈ
    for i:=0 to TextureImage[0].sizeX*TextureImage[0].sizeY-1 do
      begin
      alpha[4*i] := alpha1[i*3];                                                // R
      alpha[4*i+1] := alpha1[i*3+1];                                            // G
      alpha[4*i+2] := alpha1[i*3+2];                                            // B
      end;
    glGenTextures(1,glLogo);                                                    // Vytvo¯Ì jednu texturu
    // Vytvo¯Ì line·rnÏ filtrovanou RGBA8-Texturu
    glBindTexture(GL_TEXTURE_2D,glLogo);
    glTexImage2D(GL_TEXTURE_2D,0,GL_RGBA8,TextureImage[0].sizeX,TextureImage[0].sizeY,0,GL_RGBA,GL_UNSIGNED_BYTE,alpha);
    glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MAG_FILTER,GL_LINEAR);
    glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MIN_FILTER,GL_LINEAR);
    alpha := nil;
    alpha1 := nil;
    FreeMem(alpha);                                                             // UvolnÌ alokovanou pamÏù
    FreeMem(alpha1);                                                            // UvolnÏnÌ pamÏti po pomocnÈ promÏnnÈ
    end
    else Status := false;
  TextureImage[0] := LoadBMP('Data/multi_on_alpha.bmp');
  if Assigned(TextureImage[0]) then
    begin
    GetMem(alpha,4*TextureImage[0].sizeX*TextureImage[0].sizeY);                // Alokuje pamÏù pro RGBA8-Texturu
    //**************************************************************************
    // Alfa kan·l loga multitexturingu
    // V Delphi to bohuûel nejde tak jednoduöe jako v C++. P¯ekladaË ohl·sÌ chybu.
    // Dle n·povÏdy je toto spr·vn˝ opis konstrukce z C++. Douf·m :-)))
    //**************************************************************************
    GetMem(alpha1,sizeof(TextureImage[0].data));                                // Alokace pamÏti pro pomocnou promÏnnou
    alpha1 := TextureImage[0].data;                                             // P¯ed·nÌ dat do pomocnÈ promÏnnÈ
    for i:=0 to TextureImage[0].sizeX*TextureImage[0].sizeY-1 do
      alpha[4*i+3] := alpha1[i*3];                                              // Vezme pouze Ëervenou barvu jako alpha kan·l
    alpha1 := nil;
    FreeMem(alpha1);                                                            // UvolnÏnÌ pamÏti po pomocnÈ promÏnnÈ
    TextureImage[0] := LoadBMP('Data/multi_on.bmp');
    if not Assigned(TextureImage[0]) then Status := false;
    GetMem(alpha1,sizeof(TextureImage[0].data));                                // Alokace pamÏti pro pomocnou promÏnnou
    alpha1 := TextureImage[0].data;                                             // P¯ed·nÌ dat do pomocnÈ promÏnnÈ
    for i:=0 to TextureImage[0].sizeX*TextureImage[0].sizeY-1 do
      begin
      alpha[4*i] := alpha1[i*3];                                                // R
      alpha[4*i+1] := alpha1[i*3+1];                                            // G
      alpha[4*i+2] := alpha1[i*3+2];                                            // B
      end;
    glGenTextures(1,multiLogo);                                                 // Vytvo¯Ì jednu texturu
    // Vytvo¯Ì line·rnÏ filtrovanou RGBA8-Texturu
    glBindTexture(GL_TEXTURE_2D,multiLogo);
    glTexImage2D(GL_TEXTURE_2D,0,GL_RGBA8,TextureImage[0].sizeX,TextureImage[0].sizeY,0,GL_RGBA,GL_UNSIGNED_BYTE,alpha);
    glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MAG_FILTER,GL_LINEAR);
    glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MIN_FILTER,GL_LINEAR);
    alpha := nil;
    alpha1 := nil;
    FreeMem(alpha);                                                             // UvolnÌ alokovanou pamÏù
    FreeMem(alpha1);                                                            // UvolnÏnÌ pamÏti po pomocnÈ promÏnnÈ
    end
    else Status := false;
  Result := Status;                                         // Ozn·mÌ p¯ÌpadnÈ chyby
end;

procedure doCube;                                           // Kostka
var i: integer;
begin
  glBegin(GL_QUADS);
    // P¯ednÌ stÏna
    glNormal3f( 0.0, 0.0, +1.0);
    for i := 0 to 3 do
      begin
      glTexCoord2f(data[5*i],data[5*i+1]);
      glVertex3f(data[5*i+2],data[5*i+3],data[5*i+4]);
      end;
    // ZadnÌ stÏna
    glNormal3f( 0.0, 0.0,-1.0);
    for i := 4 to 7 do
      begin
      glTexCoord2f(data[5*i],data[5*i+1]);
      glVertex3f(data[5*i+2],data[5*i+3],data[5*i+4]);
      end;
    // HornÌ stÏna
    glNormal3f( 0.0, 1.0, 0.0);
    for i := 8 to 11 do
      begin
      glTexCoord2f(data[5*i],data[5*i+1]);
      glVertex3f(data[5*i+2],data[5*i+3],data[5*i+4]);
      end;
    // SpodnÌ stÏna
    glNormal3f( 0.0,-1.0, 0.0);
    for i := 12 to 15 do
      begin
      glTexCoord2f(data[5*i],data[5*i+1]);
      glVertex3f(data[5*i+2],data[5*i+3],data[5*i+4]);
      end;
    // Prav· stÏna
    glNormal3f( 1.0, 0.0, 0.0);
    for i := 16 to 19 do
      begin
      glTexCoord2f(data[5*i],data[5*i+1]);
      glVertex3f(data[5*i+2],data[5*i+3],data[5*i+4]);
      end;
    // Lev· stÏna
    glNormal3f(-1.0, 0.0, 0.0);
    for i := 20 to 23 do
      begin
      glTexCoord2f(data[5*i],data[5*i+1]);
      glVertex3f(data[5*i+2],data[5*i+3],data[5*i+4]);
      end;
  glEnd();
end;

procedure ReSizeGLScene(Width: GLsizei; Height: GLsizei); // ZmÏna velikosti a inicializace OpenGL okna
begin
  if (Height=0) then		                                  // ZabezpeËenÌ proti dÏlenÌ nulou
     Height:=1;                                           // NastavÌ v˝öku na jedna
  glViewport(0, 0, Width, Height);                        // Resetuje aktu·lnÌ nastavenÌ
  glMatrixMode(GL_PROJECTION);                            // ZvolÌ projekËnÌ matici
  glLoadIdentity();                                       // Reset matice
  gluPerspective(45.0,Width/Height,0.1,100.0);            // V˝poËet perspektivy
  glMatrixMode(GL_MODELVIEW);                             // ZvolÌ matici Modelview
  glLoadIdentity;                                         // Reset matice
end;

function InitGL:bool;	                              // Vöechno nastavenÌ OpenGL
begin
  Multitexturesupported := initMultitexture;        // ZjistÌ podporu multitexturingu
  if not LoadGLTextures then                        // Nahraje texturu
    begin
    Result := false;
    exit;
    end;
  glEnable(GL_TEXTURE_2D);                          // Zapne mapov·nÌ textur
  glShadeModel(GL_SMOOTH);			                    // PovolÌ jemnÈ stÌnov·nÌ
  glClearColor(0.0, 0.0, 0.0, 0.5);	  	            // »ernÈ pozadÌ
  glClearDepth(1.0);				                        // NastavenÌ hloubkovÈho bufferu
  glEnable(GL_DEPTH_TEST);			                    // PovolÌ hloubkovÈ testov·nÌ
  glDepthFunc(GL_LEQUAL);				                    // Typ hloubkovÈho testov·nÌ
  glHint(GL_PERSPECTIVE_CORRECTION_HINT,GL_NICEST); // NejlepöÌ perspektivnÌ korekce
  initLights;                                       // Inicializace svÏtel
  Result:=true;                                     // Inicializace probÏhla v po¯·dku
end;

procedure VMatMult(var M, v: array of GLfloat);
var res: array [0..2] of GLfloat;
begin
  res[0]:=M[ 0]*v[0]+M[ 1]*v[1]+M[ 2]*v[2]+M[ 3]*v[3];
  res[1]:=M[ 4]*v[0]+M[ 5]*v[1]+M[ 6]*v[2]+M[ 7]*v[3];
  res[2]:=M[ 8]*v[0]+M[ 9]*v[1]+M[10]*v[2]+M[11]*v[3];
  v[0]:=res[0];
  v[1]:=res[1];
  v[2]:=res[2];
  v[3]:=M[15];			                                // HomogennÌ sou¯adnice
end;

procedure SetUpBumps(var n, c, l, s, t: array of GLfloat);
var
  v: array [0..2] of GLfloat;                           // Vertex z aktu·lnÌ pozice ke svÏtlu
  lenQ: GLfloat;                                        // Pouûito p¯i normalizaci
begin
  //****************************************************************************
  // Funkce nastavÌ posunutÌ textury
  // n : norm·la k ploöe, musÌ mÌt dÈlku 1
  // c : nÏjak˝ bod na povrchu
  // l : pozice svÏtla
  // s : smÏr texturovacÌch sou¯adnic s (musÌ b˝t normalizov·n!)
  // t : smÏr texturovacÌch sou¯adnic t (musÌ b˝t normalizov·n!)
  //****************************************************************************
  // SpoËÌt·nÌ v z aktu·lnÌho vertexu c ke svÏtlu a jeho normalizace
  v[0]:=l[0]-c[0];
  v[1]:=l[1]-c[1];
  v[2]:=l[2]-c[2];
  lenQ:=sqrt(v[0]*v[0]+v[1]*v[1]+v[2]*v[2]);
  v[0] := v[0] / lenQ;
  v[1] := v[1] / lenQ;
  v[2] := v[2] / lenQ;
  // ZohlednÏnÌ v tak, abychom dostali texturovacÌ sou¯adnice
  c[0]:=(s[0]*v[0]+s[1]*v[1]+s[2]*v[2])*MAX_EMBOSS;
  c[1]:=(t[0]*v[0]+t[1]*v[1]+t[2]*v[2])*MAX_EMBOSS;
end;

procedure doLogo;			// MUSÕ SE ZAVOLAT Aé NAKONEC!!! ZobrazÌ dvÏ loga
begin
  glDepthFunc(GL_ALWAYS);
  glBlendFunc(GL_SRC_ALPHA,GL_ONE_MINUS_SRC_ALPHA);
  glEnable(GL_BLEND);
  glDisable(GL_LIGHTING);
  glLoadIdentity();
  glBindTexture(GL_TEXTURE_2D,glLogo);
  glBegin(GL_QUADS);
    glTexCoord2f(0.0,0.0);	glVertex3f(0.23, -0.4,-1.0);
    glTexCoord2f(1.0,0.0);	glVertex3f(0.53, -0.4,-1.0);
    glTexCoord2f(1.0,1.0);	glVertex3f(0.53, -0.25,-1.0);
    glTexCoord2f(0.0,1.0);	glVertex3f(0.23, -0.25,-1.0);
  glEnd();
  if (useMultitexture) then
  begin
    glBindTexture(GL_TEXTURE_2D,multiLogo);
    glBegin(GL_QUADS);
      glTexCoord2f(0.0,0.0);	glVertex3f(-0.53, -0.4,-1.0);
      glTexCoord2f(1.0,0.0);	glVertex3f(-0.33, -0.4,-1.0);
      glTexCoord2f(1.0,1.0);	glVertex3f(-0.33, -0.3,-1.0);
      glTexCoord2f(0.0,1.0);	glVertex3f(-0.53, -0.3,-1.0);
    glEnd();
  end;
  glDepthFunc(GL_LEQUAL);
end;

function doMesh1TexelUnits : boolean;
var
  c : array [0..3] of GLfloat;					                // Aktu·lnÌ vertex
  n : array [0..3] of GLfloat;					                // Normalizovan· norm·la danÈho povrchu
  s : array [0..3] of GLfloat;					                // SmÏr texturovacÌch sou¯adnic s, normalizov·no
  t : array [0..3] of GLfloat;					                // SmÏr texturovacÌch sou¯adnic t, normalizov·no
  l : array [0..3] of GLfloat;										      // Pozice svÏtla, kter· bude transformov·na do prostoru objektu
  Minv : array [0..15] of GLfloat;									    // P¯evr·cen· modelview matice
  i : integer;
begin
  c[3] := 1.0;
  n[3] := 1.0;
  s[3] := 1.0;
  t[3] := 1.0;
  glClear(GL_COLOR_BUFFER_BIT or GL_DEPTH_BUFFER_BIT);	// Smaûe obrazovku a hloubkov˝ buffer
  // SestavenÌ p¯evr·cenÈ modelview matice; nahradÌ funkce Push a Pop jednou funkcÌ glLoadIdentity()
  // JednoduchÈ sestavenÌ tÌm, ûe vöechny transformace provedeme opaËnÏ a v opaËnÈm po¯adÌ
  glLoadIdentity();
  glRotatef(-yrot,0.0,1.0,0.0);
  glRotatef(-xrot,1.0,0.0,0.0);
  glTranslatef(0.0,0.0,-z);
  glGetFloatv(GL_MODELVIEW_MATRIX,@Minv);
  glLoadIdentity();
  glTranslatef(0.0,0.0,z);
  glRotatef(xrot,1.0,0.0,0.0);
  glRotatef(yrot,0.0,1.0,0.0);
  // Transformace pozice svÏtla do sou¯adnic objektu:
  l[0]:=LightPosition[0];
  l[1]:=LightPosition[1];
  l[2]:=LightPosition[2];
  l[3]:=1.0;                                            // HomogenÌ sou¯adnice
  VMatMult(Minv,l);
  //****************************************************************************
  // PrvnÌ f·ze:
  //   PouûitÌ bump textury
  //   VypnutÌ blendingu
  //   VypnutÌ svÏtel
  //   PouûitÌ texturovacÌch sou¯adnic bez posunutÌ
  //   Vytvo¯enÌ geometrie
  //****************************************************************************
  glBindTexture(GL_TEXTURE_2D, bump[filter]);
  glDisable(GL_BLEND);
  glDisable(GL_LIGHTING);
  doCube();
  //****************************************************************************
  // Druh· f·ze:
  //   PouûitÌ p¯evr·cenÈ bumpmapy
  //   PovolenÌ blendingu GL_ONE, GL_ONE
  //   Ponech· vypnut· svÏtla
  //   PouûitÌ posunut˝ch texturovacÌch sou¯adnic (P¯ed kaûdou stÏnou krychle musÌme zavolat funkci SetUpBumps())
  //   Vytvo¯enÌ geometrie
  //****************************************************************************
  glBindTexture(GL_TEXTURE_2D,invbump[filter]);
  glBlendFunc(GL_ONE,GL_ONE);
  glDepthFunc(GL_LEQUAL);
  glEnable(GL_BLEND);
  glBegin(GL_QUADS);
    // P¯ednÌ stÏna
    n[0]:=0.0;		n[1]:=0.0;		n[2]:=1.0;
    s[0]:=1.0;		s[1]:=0.0;		s[2]:=0.0;
    t[0]:=0.0;		t[1]:=1.0;		t[2]:=0.0;
    for i := 0 to 3 do
    begin
      c[0]:=data[5*i+2];
      c[1]:=data[5*i+3];
      c[2]:=data[5*i+4];
      SetUpBumps(n,c,l,s,t);
      glTexCoord2f(data[5*i]+c[0], data[5*i+1]+c[1]);
      glVertex3f(data[5*i+2], data[5*i+3], data[5*i+4]);
    end;
    // ZadnÌ stÏna
    n[0]:=0.0;		n[1]:=0.0;		n[2]:=-1.0;
    s[0]:=-1.0;		s[1]:=0.0;		s[2]:=0.0;
    t[0]:=0.0;		t[1]:=1.0;		t[2]:=0.0;
    for i := 4 to 7 do
    begin
      c[0]:=data[5*i+2];
      c[1]:=data[5*i+3];
      c[2]:=data[5*i+4];
      SetUpBumps(n,c,l,s,t);
      glTexCoord2f(data[5*i]+c[0], data[5*i+1]+c[1]);
      glVertex3f(data[5*i+2], data[5*i+3], data[5*i+4]);
    end;
    // HornÌ stÏna
    n[0]:=0.0;		n[1]:=1.0;		n[2]:=0.0;
    s[0]:=1.0;		s[1]:=0.0;		s[2]:=0.0;
    t[0]:=0.0;		t[1]:=0.0;		t[2]:=-1.0;
    for i := 8 to 11 do
    begin
      c[0]:=data[5*i+2];
      c[1]:=data[5*i+3];
      c[2]:=data[5*i+4];
      SetUpBumps(n,c,l,s,t);
      glTexCoord2f(data[5*i]+c[0], data[5*i+1]+c[1]);
      glVertex3f(data[5*i+2], data[5*i+3], data[5*i+4]);
    end;
    // SpodnÌ stÏna
    n[0]:=0.0;		n[1]:=-1.0;		n[2]:=0.0;
    s[0]:=-1.0;		s[1]:=0.0;		s[2]:=0.0;
    t[0]:=0.0;		t[1]:=0.0;		t[2]:=-1.0;
    for i := 12 to 15 do
    begin
      c[0]:=data[5*i+2];
      c[1]:=data[5*i+3];
      c[2]:=data[5*i+4];
      SetUpBumps(n,c,l,s,t);
      glTexCoord2f(data[5*i]+c[0], data[5*i+1]+c[1]);
      glVertex3f(data[5*i+2], data[5*i+3], data[5*i+4]);
    end;
    // Prav· stÏna
    n[0]:=1.0;		n[1]:=0.0;		n[2]:=0.0;
    s[0]:=0.0;		s[1]:=0.0;		s[2]:=-1.0;
    t[0]:=0.0;		t[1]:=1.0;		t[2]:=0.0;
    for i := 16 to 19 do
    begin
      c[0]:=data[5*i+2];
      c[1]:=data[5*i+3];
      c[2]:=data[5*i+4];
      SetUpBumps(n,c,l,s,t);
      glTexCoord2f(data[5*i]+c[0], data[5*i+1]+c[1]);
      glVertex3f(data[5*i+2], data[5*i+3], data[5*i+4]);
    end;
    // Lev· stÏna
    n[0]:=-1.0;		n[1]:=0.0;		n[2]:=0.0;
    s[0]:=0.0;		s[1]:=0.0;		s[2]:=1.0;
    t[0]:=0.0;		t[1]:=1.0;		t[2]:=0.0;
    for i := 20 to 23 do
    begin
      c[0]:=data[5*i+2];
      c[1]:=data[5*i+3];
      c[2]:=data[5*i+4];
      SetUpBumps(n,c,l,s,t);
      glTexCoord2f(data[5*i]+c[0], data[5*i+1]+c[1]);
      glVertex3f(data[5*i+2], data[5*i+3], data[5*i+4]);
    end;
  glEnd();
  //****************************************************************************
  // T¯etÌ f·ze:
  //   PouûitÌ z·kladnÌ barevnÈ textury
  //   PovolunÌ blendingu GL_DST_COLOR, GL_SRC_COLOR
  //   Tuto blending rovnici n·sobit dvÏma: (Cdst*Csrc)+(Csrc*Cdst) = 2(Csrc*Cdst)!
  //   PovolenÌ svÏtel, aby vytvo¯ily ambientnÌ a rozpt˝lenÈ svÏtlo
  //   Vr·cenÌ GL_TEXTURE matice zpÏt na "norm·lnÌ" texturovacÌ sou¯adnice
  //   Vytvo¯it geometrii
  //****************************************************************************
  if not(emboss) then
  begin
    glTexEnvf (GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_MODULATE);
    glBindTexture(GL_TEXTURE_2D,texture[filter]);
    glBlendFunc(GL_DST_COLOR,GL_SRC_COLOR);
    glEnable(GL_LIGHTING);
    doCube();
  end;
  xrot := xrot + xspeed;
  yrot := yrot + yspeed;
  if (xrot>360.0) then xrot := xrot - 360.0;
  if (xrot<0.0) then xrot := xrot + 360.0;
  if (yrot>360.0) then yrot := yrot - 360.0;
  if (yrot<0.0) then yrot := yrot + 360.0;
  doLogo();                                             // Nakonec loga
  result := true;
end;

function doMesh2TexelUnits : boolean;
var
  c : array [0..3] of GLfloat;                          // Aktu·lnÌ vertex
  n : array [0..3] of GLfloat;                          // Normalizovan· norm·la povrchu
  s : array [0..3] of GLfloat;                          // SmÏr texturovacÌch sou¯adnic s, normalizov·no
  t : array [0..3] of GLfloat;                          // SmÏr texturovacÌch sou¯adnic t, normalizov·no
  l : array [0..3] of GLfloat;                          // Pozice svÏtla k p¯evedenÌ na sou¯adnice objektu
  Minv : array [0..15] of GLfloat;                      // P¯evr·cen· modelview matice
  i : integer;
begin
  c[3] := 1.0;
  n[3] := 1.0;
  s[3] := 1.0;
  t[3] := 1.0;
  glClear(GL_COLOR_BUFFER_BIT or GL_DEPTH_BUFFER_BIT);	// Smaûe obrazovku a hloubkov˝ buffer
  // SestavenÌ p¯evr·cenÈ modelview matice, tohle nahradÌ funkce Push a Pop jednou funkcÌ glLoadIdentity()
  // JednoduchÈ sestavenÌ tÌm, ûe vöechny transformace provedeme opaËnÏ a v opaËnÈm po¯adÌ
  glLoadIdentity();
  glRotatef(-yrot,0.0,1.0,0.0);
  glRotatef(-xrot,1.0,0.0,0.0);
  glTranslatef(0.0,0.0,-z);
  glGetFloatv(GL_MODELVIEW_MATRIX,@Minv);
  glLoadIdentity();
  glTranslatef(0.0,0.0,z);
  glRotatef(xrot,1.0,0.0,0.0);
  glRotatef(yrot,0.0,1.0,0.0);
  // Transformace pozice svÏtla na sou¯adnice objektu:
  l[0]:=LightPosition[0];
  l[1]:=LightPosition[1];
  l[2]:=LightPosition[2];
  l[3]:=1.0;                                            // HomogenÌ sou¯adnice
  VMatMult(Minv,l);
  //****************************************************************************
  // PrvnÌ f·ze:
  //    Bez blendingu
  //    Bez svÏtel
  //  NastavenÌ texture combineru 0 na
  //    PouûitÌ bumpmapy
  //    PouûitÌ neposunut˝ch texturovacÌch sou¯adnic
  //    NastavevÌ operace s texturou na GL_REPLACE, kter· pouze vykreslÌ texturu
  //  NastavenÌ texture combineru 1 na
  //    PosunutÈ texturovacÌ sou¯adnice
  //    NastavenÌ operace s texturou na GL_ADD, coû je multitexturovacÌm ekvivalentem k ONE, ONE blendingu
  //****************************************************************************
  // TEXTUROVACÕ JEDNOTKA #0:
  glActiveTextureARB(GL_TEXTURE0_ARB);
  glEnable(GL_TEXTURE_2D);
  glBindTexture(GL_TEXTURE_2D, bump[filter]);
  glTexEnvf (GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_COMBINE_EXT);
  glTexEnvf (GL_TEXTURE_ENV, GL_COMBINE_RGB_EXT, GL_REPLACE);
  // TEXTUROVACÕ JEDNOTKA #1:
  glActiveTextureARB(GL_TEXTURE1_ARB);
  glEnable(GL_TEXTURE_2D);
  glBindTexture(GL_TEXTURE_2D, invbump[filter]);
  glTexEnvf (GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_COMBINE_EXT);
  glTexEnvf (GL_TEXTURE_ENV, GL_COMBINE_RGB_EXT, GL_ADD);
  // ObecnÈ p¯epÌnaËe
  glDisable(GL_BLEND);
  glDisable(GL_LIGHTING);
  glBegin(GL_QUADS);
    // P¯ednÌ stÏna
    n[0]:=0.0;		n[1]:=0.0;		n[2]:=1.0;
    s[0]:=1.0;		s[1]:=0.0;		s[2]:=0.0;
    t[0]:=0.0;		t[1]:=1.0;		t[2]:=0.0;
    for i := 0 to 3 do
    begin
      c[0]:=data[5*i+2];
      c[1]:=data[5*i+3];
      c[2]:=data[5*i+4];
      SetUpBumps(n,c,l,s,t);
      glMultiTexCoord2fARB(GL_TEXTURE0_ARB, data[5*i], data[5*i+1]);
      glMultiTexCoord2fARB(GL_TEXTURE1_ARB,data[5*i]+c[0], data[5*i+1]+c[1]);
      glVertex3f(data[5*i+2], data[5*i+3], data[5*i+4]);
    end;
    // ZadnÌ stÏna
    n[0]:=0.0;		n[1]:=0.0;		n[2]:=-1.0;
    s[0]:=-1.0;		s[1]:=0.0;		s[2]:=0.0;
    t[0]:=0.0;		t[1]:=1.0;		t[2]:=0.0;
    for i := 4 to 7 do
    begin
      c[0]:=data[5*i+2];
      c[1]:=data[5*i+3];
      c[2]:=data[5*i+4];
      SetUpBumps(n,c,l,s,t);
      glMultiTexCoord2fARB(GL_TEXTURE0_ARB,data[5*i]     , data[5*i+1]);
      glMultiTexCoord2fARB(GL_TEXTURE1_ARB,data[5*i]+c[0], data[5*i+1]+c[1]);
      glVertex3f(data[5*i+2], data[5*i+3], data[5*i+4]);
    end;
    // HornÌ stÏna
    n[0]:=0.0;		n[1]:=1.0;		n[2]:=0.0;
    s[0]:=1.0;		s[1]:=0.0;		s[2]:=0.0;
    t[0]:=0.0;		t[1]:=0.0;		t[2]:=-1.0;
    for i := 8 to 11 do
    begin
      c[0]:=data[5*i+2];
      c[1]:=data[5*i+3];
      c[2]:=data[5*i+4];
      SetUpBumps(n,c,l,s,t);
      glMultiTexCoord2fARB(GL_TEXTURE0_ARB,data[5*i]     , data[5*i+1]     );
      glMultiTexCoord2fARB(GL_TEXTURE1_ARB,data[5*i]+c[0], data[5*i+1]+c[1]);
      glVertex3f(data[5*i+2], data[5*i+3], data[5*i+4]);
    end;
    // DolnÌ stÏna
    n[0]:=0.0;		n[1]:=-1.0;		n[2]:=0.0;
    s[0]:=-1.0;		s[1]:=0.0;		s[2]:=0.0;
    t[0]:=0.0;		t[1]:=0.0;		t[2]:=-1.0;
    for i := 12 to 15 do
    begin
      c[0]:=data[5*i+2];
      c[1]:=data[5*i+3];
      c[2]:=data[5*i+4];
      SetUpBumps(n,c,l,s,t);
      glMultiTexCoord2fARB(GL_TEXTURE0_ARB,data[5*i]     , data[5*i+1]     );
      glMultiTexCoord2fARB(GL_TEXTURE1_ARB,data[5*i]+c[0], data[5*i+1]+c[1]);
      glVertex3f(data[5*i+2], data[5*i+3], data[5*i+4]);
    end;
    // Prav· stÏna
    n[0]:=1.0;		n[1]:=0.0;		n[2]:=0.0;
    s[0]:=0.0;		s[1]:=0.0;		s[2]:=-1.0;
    t[0]:=0.0;		t[1]:=1.0;		t[2]:=0.0;
    for i := 16 to 19 do
    begin
      c[0]:=data[5*i+2];
      c[1]:=data[5*i+3];
      c[2]:=data[5*i+4];
      SetUpBumps(n,c,l,s,t);
      glMultiTexCoord2fARB(GL_TEXTURE0_ARB,data[5*i]     , data[5*i+1]     );
      glMultiTexCoord2fARB(GL_TEXTURE1_ARB,data[5*i]+c[0], data[5*i+1]+c[1]);
      glVertex3f(data[5*i+2], data[5*i+3], data[5*i+4]);
    end;
    // Lev· stÏna
    n[0]:=-1.0;		n[1]:=0.0;		n[2]:=0.0;
    s[0]:=0.0;		s[1]:=0.0;		s[2]:=1.0;
    t[0]:=0.0;		t[1]:=1.0;		t[2]:=0.0;
    for i := 20 to 23 do
    begin
      c[0]:=data[5*i+2];
      c[1]:=data[5*i+3];
      c[2]:=data[5*i+4];
      SetUpBumps(n,c,l,s,t);
      glMultiTexCoord2fARB(GL_TEXTURE0_ARB,data[5*i]     , data[5*i+1]     );
      glMultiTexCoord2fARB(GL_TEXTURE1_ARB,data[5*i]+c[0], data[5*i+1]+c[1]);
      glVertex3f(data[5*i+2], data[5*i+3], data[5*i+4]);
    end;
  glEnd();
  //****************************************************************************
  // Druh· f·ze:
  //   PouûitÌ z·kladnÌ textury
  //   PovolenÌ osvÏtlenÌ
  //   NeposunutÈ texturovacÌ sou¯adnice - vyresetovat GL_TEXTURE matice
  //   NastavenÌ texture environment na GL_MODULATE
  //****************************************************************************
  glActiveTextureARB(GL_TEXTURE1_ARB);
  glDisable(GL_TEXTURE_2D);
  glActiveTextureARB(GL_TEXTURE0_ARB);
  if not(emboss) then
  begin
    glTexEnvf (GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_MODULATE);
    glBindTexture(GL_TEXTURE_2D,texture[filter]);
    glBlendFunc(GL_DST_COLOR,GL_SRC_COLOR);
    glEnable(GL_BLEND);
    glEnable(GL_LIGHTING);
    doCube();
  end;
  xrot := xrot + xspeed;
  yrot := yrot + yspeed;
  if (xrot>360.0) then xrot := xrot - 360.0;
  if (xrot<0.0) then xrot := xrot + 360.0;
  if (yrot>360.0) then yrot := yrot - 360.0;
  if (yrot<0.0) then yrot := yrot + 360.0;
  doLogo;                                               // Nakonec loga
  result := true;
end;

function doMeshNoBumps : boolean;
begin
  glClear(GL_COLOR_BUFFER_BIT or GL_DEPTH_BUFFER_BIT);	// Smaûe obrazovku a hloubkov˝ buffer
  glLoadIdentity();									                    // Reset matice
  glTranslatef(0.0,0.0,z);
  glRotatef(xrot,1.0,0.0,0.0);
  glRotatef(yrot,0.0,1.0,0.0);
  if (useMultitexture) then
  begin
    glActiveTextureARB(GL_TEXTURE1_ARB);
    glDisable(GL_TEXTURE_2D);
    glActiveTextureARB(GL_TEXTURE0_ARB);
  end;
  glDisable(GL_BLEND);
  glBindTexture(GL_TEXTURE_2D,texture[filter]);
  glBlendFunc(GL_DST_COLOR,GL_SRC_COLOR);
  glEnable(GL_LIGHTING);
  doCube();
  xrot := xrot + xspeed;
  yrot := yrot + yspeed;
  if (xrot>360.0) then xrot := xrot - 360.0;
  if (xrot<0.0) then xrot := xrot + 360.0;
  if (yrot>360.0) then yrot := yrot - 360.0;
  if (yrot<0.0) then yrot := yrot + 360.0;
  doLogo();                                             // Nakonec loga
  result := true;
end;

function DrawGLScene():bool;                            // Vykreslov·nÌ
begin
  if (bumps) then
  begin
    if (useMultitexture and (maxTexelUnits>1)) then
      result := doMesh2TexelUnits
    else
      result := doMesh1TexelUnits;
  end
  else result := doMeshNoBumps;
end;


function WndProc(hWnd: HWND;                            // Handle okna
                 message: UINT;                         // Zpr·va pro okno
                 wParam: WPARAM;                        // DoplÚkovÈ informace
                 lParam: LPARAM):                       // DoplÚkovÈ informace
                                  LRESULT; stdcall;
begin
  if message=WM_SYSCOMMAND then                         // SystÈmov˝ p¯Ìkaz
    begin
      case wParam of                                    // Typ systÈmovÈho p¯Ìkazu
        SC_SCREENSAVE,SC_MONITORPOWER:                  // Pokus o zapnutÌ öet¯iËe obrazovky, Pokus o p¯echod do ˙spornÈho reûimu?
          begin
            result:=0;                                  // Zabr·nÌ obojÌmu
            exit;
          end;
      end;
    end;
  case message of                                       // VÏtvenÌ podle p¯ÌchozÌ zpr·vy
    WM_ACTIVATE:                                        // ZmÏna aktivity okna
      begin
        if (Hiword(wParam)=0) then                      // Zkontroluje zda nenÌ minimalizovanÈ
          active:=true                                  // Program je aktivnÌ
        else
          active:=false;                                // Program nenÌ aktivnÌ
        Result:=0;                                      // N·vrat do hlavnÌho cyklu programu
      end;
    WM_CLOSE:                                           // Povel k ukonËenÌ programu
      Begin
        PostQuitMessage(0);                             // Poöle zpr·vu o ukonËenÌ
        result:=0                                       // N·vrat do hlavnÌho cyklu programu
      end;
    WM_KEYDOWN:                                         // Stisk kl·vesy
      begin
        keys[wParam] := TRUE;                           // Ozn·mÌ to programu
        result:=0;                                      // N·vrat do hlavnÌho cyklu programu
      end;
    WM_KEYUP:                                           // UvolnÏnÌ kl·vesy
      begin
    	keys[wParam] := FALSE;                            // Ozn·mÌ to programu
        result:=0;                                      // N·vrat do hlavnÌho cyklu programu
      end;
    WM_SIZe:                                            // ZmÏna velikosti okna
      begin
    	ReSizeGLScene(LOWORD(lParam),HIWORD(lParam));     // LoWord=äÌ¯ka, HiWord=V˝öka
        result:=0;                                      // N·vrat do hlavnÌho cyklu programu
      end
    else
      // P¯ed·nÌ ostatnÌch zpr·v systÈmu
      begin
      	Result := DefWindowProc(hWnd, message, wParam, lParam);
      end;
    end;
end;


procedure KillGLWindow;                                 // ZavÌr·nÌ okna
begin
  if FullScreen then                                    // Jsme ve fullscreenu?
    begin
      ChangeDisplaySettings(devmode(nil^),0);           // P¯epnutÌ do systÈmu
      showcursor(true);                                 // ZobrazÌ kurzor myöi
    end;
  if h_rc<> 0 then                                      // M·me rendering kontext?
    begin
      if (not wglMakeCurrent(h_Dc,0)) then              // Jsme schopni oddÏlit kontexty?
        MessageBox(0,'Release of DC and RC failed.',' Shutdown Error',MB_OK or MB_ICONERROR);
      if (not wglDeleteContext(h_Rc)) then              // Jsme schopni smazat RC?
        begin
          MessageBox(0,'Release of Rendering Context failed.',' Shutdown Error',MB_OK or MB_ICONERROR);
          h_Rc:=0;                                      // NastavÌ hRC na 0
        end;
    end;
  if (h_Dc=1) and (releaseDC(h_Wnd,h_Dc)<>0) then       // Jsme schopni uvolnit DC
    begin
      MessageBox(0,'Release of Device Context failed.',' Shutdown Error',MB_OK or MB_ICONERROR);
      h_Dc:=0;                                          // NastavÌ hDC na 0
    end;
  if (h_Wnd<>0) and (not destroywindow(h_Wnd))then      // Jsme schopni odstranit okno?
    begin
      MessageBox(0,'Could not release hWnd.',' Shutdown Error',MB_OK or MB_ICONERROR);
      h_Wnd:=0;                                         // NastavÌ hWnd na 0
    end;
  if (not UnregisterClass('OpenGL',hInstance)) then     // Jsme schopni odregistrovat t¯Ìdu okna?
    begin
      MessageBox(0,'Could Not Unregister Class.','SHUTDOWN ERROR',MB_OK or MB_ICONINFORMATION);
    end;
end;


function CreateGlWindow(title:Pchar; width,height,bits:integer;FullScreenflag:bool):boolean stdcall;
var
  Pixelformat: GLuint;            // Ukl·d· form·t pixel˘
  wc:TWndclass;                   // Struktura Windows Class
  dwExStyle:dword;                // RozöÌ¯en˝ styl okna
  dwStyle:dword;                  // Styl okna
  pfd: pixelformatdescriptor;     // NastavenÌ form·tu pixel˘
  dmScreenSettings: Devmode;      // MÛd za¯ÌzenÌ
  h_Instance:hinst;               // Instance okna
  WindowRect: TRect;              // ObdÈlnÌk okna
begin
  WindowRect.Left := 0;                               // NastavÌ lev˝ okraj na nulu
  WindowRect.Top := 0;                                // NastavÌ hornÌ okraj na nulu
  WindowRect.Right := width;                          // NastavÌ prav˝ okraj na zadanou hodnotu
  WindowRect.Bottom := height;                        // NastavÌ spodnÌ okraj na zadanou hodnotu
  h_instance:=GetModuleHandle(nil);                   // ZÌsk· instanci okna
  FullScreen:=FullScreenflag;                         // NastavÌ promÏnnou fullscreen na spr·vnou hodnotu
  with wc do
    begin
      style:=CS_HREDRAW or CS_VREDRAW or CS_OWNDC;    // P¯ekreslenÌ p¯i zmÏnÏ velikosti a vlastnÌ DC
      lpfnWndProc:=@WndProc;                          // Definuje proceduru okna
      cbClsExtra:=0;                                  // é·dn· extra data
      cbWndExtra:=0;                                  // é·dn· extra data
      hInstance:=h_Instance;                          // Instance
      hIcon:=LoadIcon(0,IDI_WINLOGO);                 // StandardnÌ ikona
      hCursor:=LoadCursor(0,IDC_ARROW);               // StandardnÌ kurzor myöi
      hbrBackground:=0;                               // PozadÌ nenÌ nutnÈ
      lpszMenuName:=nil;                              // Nechceme menu
      lpszClassName:='OpenGl';                        // JmÈno t¯Ìdy okna
    end;
  if  RegisterClass(wc)=0 then                        // Registruje t¯Ìdu okna
    begin
      MessageBox(0,'Failed To Register The Window Class.','Error',MB_OK or MB_ICONERROR);
      Result:=false;                                  // P¯i chybÏ vr·tÌ false
      exit;
    end;
  if FullScreen then                                  // Budeme ve fullscreenu?
    begin
      ZeroMemory( @dmScreenSettings, sizeof(dmScreenSettings) );  // Vynulov·nÌ pamÏti
      with dmScreensettings do
        begin
          dmSize := sizeof(dmScreenSettings);         // Velikost struktury Devmode
          dmPelsWidth  := width;	                    // äÌ¯ka okna
	        dmPelsHeight := height;                     // V˝öka okna
          dmBitsPerPel := bits;                       // Barevn· hloubka
          dmFields     := DM_BITSPERPEL or DM_PELSWIDTH or DM_PELSHEIGHT;
        end;
      // PokusÌ se pouûÌt pr·vÏ definovanÈ nastavenÌ
      if (ChangeDisplaySettings(dmScreenSettings, CDS_FULLSCREEN))<>DISP_CHANGE_SUCCESSFUL THEN
        Begin
          // Nejde-li fullscreen, m˘ûe uûivatel spustit program v oknÏ nebo ho opustit
          if MessageBox(0,'This FullScreen Mode Is Not Supported. Use Windowed Mode Instead?'
                                             ,'NeHe GL',MB_YESNO or MB_ICONEXCLAMATION)= IDYES then
                FullScreen:=false                     // BÏh v oknÏ
          else
            begin
              // ZobrazÌ uûivateli zpr·vu, ûe program bude ukonËen
              MessageBox(0,'Program Will Now Close.','Error',MB_OK or MB_ICONERROR);
              Result:=false;                          // Vr·tÌ FALSE
              exit;
            end;
          end;
    end;
  if FullScreen then                                  // Jsme st·le ve fullscreenu?
    begin
      dwExStyle:=WS_EX_APPWINDOW;                     // RozöÌ¯en˝ styl okna
      dwStyle:=WS_POPUP or WS_CLIPSIBLINGS or WS_CLIPCHILDREN; // Styl okna
      Showcursor(false);                              // Skryje kurzor
    end
  else
    begin
      dwExStyle:=WS_EX_APPWINDOW or WS_EX_WINDOWEDGE;   // RozöÌ¯en˝ styl okna
      dwStyle:=WS_OVERLAPPEDWINDOW or WS_CLIPSIBLINGS or WS_CLIPCHILDREN; // Styl okna
    end;
  AdjustWindowRectEx(WindowRect,dwStyle,false,dwExStyle); // P¯izp˘sobenÌ velikosti okna
  // Vytvo¯enÌ okna
  H_wnd:=CreateWindowEx(dwExStyle,                    // RozöÌ¯en˝ styl
                               'OpenGl',              // JmÈno t¯Ìdy
                               Title,                 // Titulek
                               dwStyle,               // Definovan˝ styl
                               0,0,                   // Pozice
                               WindowRect.Right-WindowRect.Left,  // V˝poËet öÌ¯ky
                               WindowRect.Bottom-WindowRect.Top,  // V˝poËet v˝öky
                               0,                     // é·dnÈ rodiËovskÈ okno
                               0,                     // Bez menu
                               hinstance,             // Instance
                               nil);                  // Nep¯edat nic do WM_CREATE
  if h_Wnd=0 then                                     // Pokud se okno nepoda¯ilo vytvo¯it
    begin
      KillGlWindow();                                 // ZruöÌ okno
      MessageBox(0,'Window creation error.','Error',MB_OK or MB_ICONEXCLAMATION);
      Result:=false;                                  // Vr·tÌ chybu
      exit;
    end;
  with pfd do                                         // Ozn·mÌme Windows jak chceme vöe nastavit
    begin
      nSize:= SizeOf( PIXELFORMATDESCRIPTOR );        // Velikost struktury
      nVersion:= 1;                                   // »Ìslo verze
      dwFlags:= PFD_DRAW_TO_WINDOW                    // Podpora okna
        or PFD_SUPPORT_OPENGL                         // Podpora OpenGL
        or PFD_DOUBLEBUFFER;                          // Podpora Double Bufferingu
      iPixelType:= PFD_TYPE_RGBA;                     // RGBA Format
      cColorBits:= bits;                              // ZvolÌ barevnou hloubku
      cRedBits:= 0;                                   // Bity barev ignorov·ny
      cRedShift:= 0;
      cGreenBits:= 0;
      cBlueBits:= 0;
      cBlueShift:= 0;
      cAlphaBits:= 0;                                 // é·dn˝ alpha buffer
      cAlphaShift:= 0;                                // Ignorov·n Shift bit
      cAccumBits:= 0;                                 // é·dn˝ akumulaËnÌ buffer
      cAccumRedBits:= 0;                              // AkumulaËnÌ bity ignorov·ny
      cAccumGreenBits:= 0;
      cAccumBlueBits:= 0;
      cAccumAlphaBits:= 0;
      cDepthBits:= 16;                                // 16-bitov˝ hloubkov˝ buffer (Z-Buffer)
      cStencilBits:= 0;                               // é·dn˝ Stencil Buffer
      cAuxBuffers:= 0;                                // é·dn˝ Auxiliary Buffer
      iLayerType:= PFD_MAIN_PLANE;                    // HlavnÌ vykreslovacÌ vrstva
      bReserved:= 0;                                  // Rezervov·no
      dwLayerMask:= 0;                                // Maska vrstvy ignorov·na
      dwVisibleMask:= 0;
      dwDamageMask:= 0;
    end;
  h_Dc := GetDC(h_Wnd);                               // ZkusÌ p¯ipojit kontext za¯ÌzenÌ
  if h_Dc=0 then                                      // Poda¯ilo se p¯ipojit kontext za¯ÌzenÌ?
    begin
      KillGLWindow();                                 // Zav¯e okno
      MessageBox(0,'Cant''t create a GL device context.','Error',MB_OK or MB_ICONEXCLAMATION);
      Result:=false;                                  // UkonËÌ program
      exit;
    end;
  PixelFormat := ChoosePixelFormat(h_Dc, @pfd);       // ZkusÌ najÌt Pixel Format
  if (PixelFormat=0) then                             // Poda¯ilo se najÌt Pixel Format?
    begin
      KillGLWindow();                                 // Zav¯e okno
      MessageBox(0,'Cant''t Find A Suitable PixelFormat.','Error',MB_OK or MB_ICONEXCLAMATION);
      Result:=false;                                  // UkonËÌ program
      exit;
    end;
  if (not SetPixelFormat(h_Dc,PixelFormat,@pfd)) then  // Poda¯ilo se nastavit Pixel Format?
    begin
      KillGLWindow();                                 // Zav¯e okno
      MessageBox(0,'Cant''t set PixelFormat.','Error',MB_OK or MB_ICONEXCLAMATION);
      Result:=false;                                  // UkonËÌ program
      exit;
    end;
  h_Rc := wglCreateContext(h_Dc);                     // Poda¯ilo se vytvo¯it Rendering Context?
  if (h_Rc=0) then
    begin
      KillGLWindow();                                 // Zav¯e okno
      MessageBox(0,'Cant''t create a GL rendering context.','Error',MB_OK or MB_ICONEXCLAMATION);
      Result:=false;                                  // UkonËÌ program
      exit;
    end;
  if (not wglMakeCurrent(h_Dc, h_Rc)) then            // Poda¯ilo se aktivovat Rendering Context?
    begin
      KillGLWindow();                                 // Zav¯e okno
      MessageBox(0,'Cant''t activate the GL rendering context.','Error',MB_OK or MB_ICONEXCLAMATION);
      Result:=false;                                  // UkonËÌ program
      exit;
    end;
  ShowWindow(h_Wnd,SW_SHOW);                          // ZobrazenÌ okna
  SetForegroundWindow(h_Wnd);                         // Do pop¯edÌ
  SetFOcus(h_Wnd);                                    // ZamÏ¯Ì fokus
  ReSizeGLScene(width,height);                        // NastavenÌ perspektivy OpenGL scÈny
  if (not InitGl()) then                              // Inicializace okna
    begin
      KillGLWindow();                                 // Zav¯e okno
      MessageBox(0,'initialization failed.','Error',MB_OK or MB_ICONEXCLAMATION);
      Result:=false;                                  // UkonËÌ program
      exit;
    end;
  Result:=true;                                       // Vöe probÏhlo v po¯·dku
end;


function WinMain(hInstance: HINST;                    // Instance
		 hPrevInstance: HINST;                            // P¯edchozÌ instance
		 lpCmdLine: PChar;                                // Parametry p¯ÌkazovÈ ¯·dky
		 nCmdShow: integer):                              // Stav zobrazenÌ okna
                        integer; stdcall;
var
  msg: TMsg;                                          // Struktura zpr·v systÈmu
  done: Bool;                                         // PromÏnn· pro ukonËenÌ programu

begin
  done:=false;
  // Dotaz na uûivatele pro fullscreen/okno
  if MessageBox(0,'Would You Like To Run In FullScreen Mode?','Start FullScreen',
                             MB_YESNO or MB_ICONQUESTION)=IDNO then
    FullScreen:=false                                 // BÏh v oknÏ
  else
    FullScreen:=true;                                 // Fullscreen
  if not CreateGLWindow('NeHe''s OpenGL Framework',640,480,16,FullScreen) then // Vytvo¯enÌ OpenGL okna
    begin
      Result := 0;                                    // Konec programu p¯i chybÏ
      exit;
    end;
  while not done do                                   // HlavnÌ cyklus programu
    begin
      if (PeekMessage(msg, 0, 0, 0, PM_REMOVE)) then  // P¯iöla zpr·va?
        begin
          if msg.message=WM_QUIT then                 // Obdrûeli jsme zpr·vu pro ukonËenÌ?
            done:=true                                // Konec programu
          else
            begin
	          TranslateMessage(msg);                    // P¯eloûÌ zpr·vu
	          DispatchMessage(msg);                     // Odeöle zpr·vu
	        end;
        end
      else      // Pokud nedoöla û·dn· zpr·va
        begin
          // Je program aktivnÌ, ale nelze kreslit? Byl stisknut ESC?
          if (active and not(DrawGLScene()) or keys[VK_ESCAPE]) then
            done:=true                                // UkonËÌme program
          else                                        // P¯ekreslenÌ scÈny
            SwapBuffers(h_Dc);                        // ProhozenÌ buffer˘ (Double Buffering)
          if keys[VK_F1] then                         // Byla stisknuta kl·vesa F1?
            begin
            Keys[VK_F1] := false;                     // OznaË ji jako nestisknutou
            KillGLWindow();                           // ZruöÌ okno
            FullScreen := not FullScreen;             // Negace fullscreen
            // Znovuvytvo¯enÌ okna
            if not CreateGLWindow('NeHe''s OpenGL Framework',640,480,16,fullscreen) then
              Result := 0;                            // Konec programu pokud nebylo vytvo¯eno
            end;
          //E: p¯epÌn·nÌ Emboss/bumpmapov˝ mÛd
          //M: vypÌn·nÌ a zapÌn·nÌ multitexturingu
          //B: vypÌn·nÌ a zapÌn·nÌ bumpmappingu, pouze v emboss mÛdu
          //F: p¯epÌn·nÌ filtr˘, GL_NEAREST nenÌ vhodn˝ pro bumpmapping
          //KURSOROV… KL¡VESY: ot·ËenÌ krychle
          if (keys[ord('E')]) then
            begin
              keys[ord('E')] := false;
              emboss := not(emboss);
            end;
          if (keys[ord('M')]) then
            begin
              keys[ord('M')] := false;
              useMultitexture := (not(useMultitexture) and multitextureSupported);
            end;
          if (keys[ord('B')]) then
            begin
              keys[ord('B')]:=false;
              bumps := not(bumps);
            end;
          if (keys[ord('F')]) then
            begin
              keys[ord('F')] := false;
              filter := filter +  1;
              filter := filter mod 3;
            end;
          if (keys[VK_PRIOR]) then
            begin
              z := z - 0.02;
            end;
          if (keys[VK_NEXT]) then
            begin
              z := z + 0.02;
            end;
          if (keys[VK_UP]) then
            begin
              xspeed := xspeed - 0.01;
            end;
          if (keys[VK_DOWN]) then
            begin
              xspeed := xspeed + 0.01;
            end;
          if (keys[VK_RIGHT]) then
            begin
              yspeed := yspeed + 0.01;
            end;
          if (keys[VK_LEFT]) then
            begin
              yspeed := yspeed - 0.01;
            end;
        end;
    end;                                              // Konec smyËky while
  killGLwindow();                                     // Zav¯e okno
  result:=msg.wParam;                                 // UkonËenÌ programu
end;

begin
  WinMain( hInstance, hPrevInst, CmdLine, CmdShow );   // Start programu
end.

